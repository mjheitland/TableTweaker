<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers</name>
    </assembly>
    <members>
        <member name="T:Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Design.CA1008CSharpCodeFixProvider">
            <summary>
            CA1008: Enums should have zero value
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Design.EnumWithFlagsCSharpCodeFixProvider">
            <summary>
            CA1027: Mark enums with FlagsAttribute
            CA2217: Do not mark enums with FlagsAttribute
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Design.CSharpCA1024DiagnosticAnalyzer">
            <summary>
            CA1024: Use properties where appropriate
            
            Cause:
            A public or protected method has a name that starts with Get, takes no parameters, and returns a value that is not an array.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Design.CSharpEnumWithFlagsDiagnosticAnalyzer">
            <summary>
            Implements CA1027 and CA2217
            
            1) CA1027: Mark enums with FlagsAttribute
            
            Cause:
            The values of a public enumeration are powers of two or are combinations of other values that are defined in the enumeration,
            and the System.FlagsAttribute attribute is not present.
            To reduce false positives, this rule does not report a violation for enumerations that have contiguous values.
            
            2) CA2217: Do not mark enums with FlagsAttribute
            
            Cause:
            An externally visible enumeration is marked with FlagsAttribute and it has one or more values that are not powers of two or
            a combination of the other defined values on the enumeration.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Performance.CA1813CSharpCodeFixProvider">
            <summary>
            CA1813: Seal attribute types for improved performance. Sealing attribute types speeds up performance during reflection on custom attributes.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Reliability.CSharpCA2002DiagnosticAnalyzer">
            <summary>
            CA2002: Do not lock on objects with weak identities
            
            Cause:
            A thread that attempts to acquire a lock on an object that has a weak identity could cause hangs.
            
            Description:
            An object is said to have a weak identity when it can be directly accessed across application domain boundaries. 
            A thread that tries to acquire a lock on an object that has a weak identity can be blocked by a second thread in 
            a different application domain that has a lock on the same object. 
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Usage.CA2213CSharpCodeFixProvider">
            <summary>
            CA2213: Disposable fields should be disposed
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Usage.CSharpCA2213DiagnosticAnalyzer">
            <summary>
            CA2213: Disposable fields should be disposed
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.CSharp.FxCopAnalyzers.Usage.CSharpCA2214DiagnosticAnalyzer">
            <summary>
            CA2214: Do not call overridable methods in constructors
            
            Cause: The constructor of an unsealed type calls a virtual method defined in its class.
            
            Description: When a virtual method is called, the actual type that executes the method is not selected 
            until run time. When a constructor calls a virtual method, it is possible that the constructor for the 
            instance that invokes the method has not executed. 
            </summary>
        </member>
    </members>
</doc>
